@model RiskGame.Models.GameBattleViewModel
@using RiskGame.Helper
@using RiskGame.Models
@using System.Web.Script.Serialization
@{
    Layout = "~/Views/Shared/_LayoutGame.cshtml";
    ViewBag.Title = "Open Risk Page";
}
<div class="jumbotron">
    <h2><i class="fa fa-shield"></i> Open Risk</h2>
    @Html.Partial("_HeaderGameInfo")

</div>
<div class="rows col-12">
    <div class="col-md-5">
        <div class="card-header">
            <strong>User Protect Risks</strong>
            <span style="font-size:14px;">Total Cost: @(Model.UserGameRisk.Sum(x => x.RiskOption.ActionEffectValue).GetValueOrDefault().ToString("n0"))</span>
        </div>

        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <td><b>RiskName</b></td>
                    <td><b>RiskLevel</b></td>
                    <td><b>Cost</b></td>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model.UserGameRisk.OrderByDescending(o => o.RiskOption.RiskLevel).ThenBy(o => o.RiskId))
                {
                    <tr>
                        <td>
                            <span class="badge badge-pill badge-default">@Enum.GetName(typeof(Const.RiskType), (int)item.Risk.RiskType)</span>
                            @item.Risk.RiskName
                            <div><p class="small">@item.Risk.RiskDetail</p></div>
                        </td>
                        <td>
                            @RenderLevel(item.RiskOption.RiskLevel)
                        </td>
                        <td>
                            @item.RiskOption.ActionEffectValue.GetValueOrDefault().ToString("n0")
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>

    <div class="col-md-7">
        <div class="card-header">
            <strong>Game Risks</strong>
            <span>Total Pay: <b style="font-size:14px;" class="text-danger"> @(Model.UserGameBattleData.Sum(x => x.EffectMoney).ToString("n0"))</b></span>
        </div>
        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <td><b>RiskName</b></td>
                    <td><b>RiskLevel</b></td>
                    <td><b>Cost (Effect)</b></td>
                    <td><b>Ratio</b></td>
                    <td><b>Estimate Pay</b></td>
                    <td><b>Fact Impact</b></td>
                    <td><b>ProtectStatus</b></td>
                    <td><b>Actual Pay</b></td>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model.UserGameBattleData.OrderByDescending(o => o.GameBattle.RiskOption.RiskLevel).ThenBy(o => o.GameBattle.Risk.RiskId))
                {
                    <tr>
                        <td>
                            <span class="badge badge-pill badge-primary">@Enum.GetName(typeof(Const.RiskType), (int)item.GameBattle.Risk.RiskType)</span>
                            @item.GameBattle.Risk.RiskName
                            <div><p class="small">@item.GameBattle.Risk.RiskDetail</p></div>
                        </td>
                        <td>
                            @RenderLevel(item.GameBattle.RiskOption.RiskLevel)
                        </td>
                        <td>
                            @item.GameBattle.ActionEffectValue.GetValueOrDefault().ToString("n0")
                        </td>

                        <td>
                            @item.GameBattle.Ratio
                        </td>
                        <td>
                            @((item.GameBattle.ActionEffectValue * item.GameBattle.Ratio).GetValueOrDefault().ToString("n0"))
                        </td>
                        <td>
                            @if (item.RiskNewsImpact != null)
                            {
                                @Html.Raw($"+ {item.RiskNewsImpactPercent * 100}%")
                            }
                        </td>
                        <td>
                            @RenderProtectStatus(item.ProtectStatus)
                        </td>
                        <td>
                            @item.EffectMoney.ToString("n0")
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<br />
<br />
<br />
<br />
@*<div class="rows col-md-12">
        <div class="alert alert-info alert-dismissible" role="alert">
            <strong><i class="fa fa-newspaper-o"></i> Breaking News!</strong>
            <marquee><strong style="">BBC รายงานว่ามีกลุ่ม Hacker ตะวันออกกลางได้ทำการเจาะระบบ Cloud ของ Microsoft และ Amazon คาดว่าข้อมูลของผู้ใช้งานกว่า 5ล้านราย จะมีผลกระทบ</strong></marquee>
        </div>
    </div>*@

<div class="container">
    <div class="content text-center">
        @if (Model.GameDone)
        {
            @Html.ActionLink(" Game Done", "Index", "GameResult", null, new { @class = "btn btn-success", @style = "font-size: x-large;text-align:center;" })
        }
        else
        {
            @Html.ActionLink(" Next Turn", "Index", "Game", null, new { @class = "btn btn-primary", @style = "font-size: x-large;text-align: center;" })
        }
    </div>
</div>

@helper RenderLevel(int? level)
{

    if (level == 1)
    {
        <i class="text-success fa fa-star"></i>
    }
    else if (level == 2)
    {
        @*<b class="text-warning">@level</b>*@
        <i class="text-warning fa fa-star"></i><i class="text-warning fa fa-star"></i>
    }
    else if (level == 3)
    {
        <i class="text-danger fa fa-star"></i><i class="text-danger fa fa-star"></i><i class="text-danger fa fa-star"></i>
    }
    else if (level == 0)
    {
        <i class="text-dark fa fa-star-o"></i>
    }
}


@helper RenderProtectStatus(string status)
{
    if (status.ToUpper().Equals("WIN"))
    {
        <b class="text-primary text-lg-center">Overpaid</b>
    }
    else if (status.ToUpper().Equals("DRAW"))
    {
        <b class="text-success text-lg-center">Balanced</b>
    }
    else if (status.ToUpper().Equals("LOSE"))
    {
        <b class="text-danger text-lg-center">Loss</b>
    }
}



@helper RenderFactImpact()
{

}



@if (!string.IsNullOrEmpty(Model.OpenRiskGameBattleModelArray))
{
    <script type="text/javascript">
                var searializedObject = @Html.Raw(Model.OpenRiskGameBattleModelArray);
                Swal.queue(searializedObject);
    </script>

}